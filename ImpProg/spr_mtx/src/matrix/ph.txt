NOTES:

UP && CW  && n % 2 == 0 => x := n - 1; y := n - 1,
UP && CW  && n % 2 != 0 => x := 0; y := 0,
UP && CCW && n % 2 == 0 => x := 0; y := n - 1,
UP && CCW && n % 2 != 0 => x := n - 1; y := 0

// Count length:
    int count = n * n;

    // Starting index position:
    int x = n - 1;
    int y = 0;
    
    int x_steps = n - 1;
    int y_steps = n - 1;
    
    while (x_steps > 0 || y_steps > 0) {
        for (int i = 0; i < x_steps; i++) {
            (*matrix)[y][x--] = count--;
        }
        for (int i = 0; i < y_steps; i++) {
            (*matrix)[y++][x] = count--;
        }
        for (int i = 0; i < x_steps; i++) {
            (*matrix)[y][x++] = count--;
        }
        for (int i = 0; i < y_steps; i++) {
            (*matrix)[y--][x] = count--;
        }

        x--;
        y++;
        x_steps -= 2;
        y_steps -= 2;
    }

    // Handle remaining element for odd dimensions:
    if (n % 2 == 1) {
        (*matrix)[y][x] = count--;
    }