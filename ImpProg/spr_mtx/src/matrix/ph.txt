void fill_matrix(int n, Direction dir, Spin spin, int ***matrix) {
    // Pointer to matrix:
    int **mtx_ptr = (*matrix);
    
    // Number counter:
    int count = n * n;

    // Determining the starting coordinates and filling up the matrix:
    int x_steps = n - 1;
    int y_steps = n - 1;
    int x, y = 0;
    
    switch (dir) {




    // UP:
    case UP:
        if (spin == CW && n % 2 == 0) {
            x = n - 1;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;

                x--;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CW && n % 2 != 0) {
            x = 0;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;

                x++;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        else if (spin == CCW && n % 2 == 0) {
            x = 0;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;

                x++;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CCW && n % 2 != 0) {
            x = n - 1;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;

                x--;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        break;

    // DOWN:
        case DOWN:
            if (spin == CW && n % 2 == 0) {
                x = 0;
                y = 0;

                while (x_steps > 0 || y_steps > 0) {
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y][x--] = count--;

                    x++;
                    y++;
                    x_steps -= 2;
                    y_steps -= 2;
                }
            }
            else if (spin == CW && n % 2 != 0) {
                x = n - 1;
                y = n - 1;

                while (x_steps > 0 || y_steps > 0) {
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;

                    x--;
                    y--;
                    x_steps -= 2;
                    y_steps -= 2;
                }

                mtx_ptr[y][x] = 1;
            }
            else if (spin == CCW && n % 2 == 0) {
                x = n - 1;
                y = 0;

                while (x_steps > 0 || y_steps > 0) {
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;

                    x--;
                    y++;
                    x_steps -= 2;
                    y_steps -= 2;
                }
            }
            else if (spin == CCW && n % 2 != 0) {
                x = 0;
                y = n - 1;

                while (x_steps > 0 || y_steps > 0) {
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                    for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                    for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;

                    x++;
                    y--;
                    x_steps -= 2;
                    y_steps -= 2;
                }

                mtx_ptr[y][x] = 1;
            }
            break;
        default:
            printf("Error while generating matrix!\n");
            break;
        }


    // RIGHT:
    case RIGHT:
        if (spin == CW && n % 2 == 0) {
            x = 0;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;

                x++;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CW && n % 2 != 0) {
            x = n - 1;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;

                x--;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        else if (spin == CCW && n % 2 == 0) {
            x = 0;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;

                x++;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CCW && n % 2 != 0) {
            x = n - 1;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;

                x--;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        break;
    // LEFT:
    case LEFT:
        if (spin == CW && n % 2 == 0) {
            x = n - 1;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;

                x--;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CW && n % 2 != 0) {
            x = 0;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;

                x++;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        else if (spin == CCW && n % 2 == 0) {
            x = n - 1;
            y = n - 1;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;

                x--;
                y--;
                x_steps -= 2;
                y_steps -= 2;
            }
        }
        else if (spin == CCW && n % 2 != 0) {
            x = 0;
            y = 0;

            while (x_steps > 0 || y_steps > 0) {
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x++] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y++][x] = count--;
                for (int i = 0; i < x_steps; i++) mtx_ptr[y][x--] = count--;
                for (int i = 0; i < y_steps; i++) mtx_ptr[y--][x] = count--;

                x++;
                y++;
                x_steps -= 2;
                y_steps -= 2;
            }

            mtx_ptr[y][x] = 1;
        }
        break;
}